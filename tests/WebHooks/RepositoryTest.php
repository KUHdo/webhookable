<?php

namespace Tests\Feature\WebHooks;

use App\Repositories\WebHook\WebHookRepository;
use KUHdo\Webhookable\WebHook;
use Event;
use Illuminate\Support\Collection;
use Illuminate\Support\Str;
use Laravel\Passport\ClientRepository;
use Orchestra\Testbench\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

/**
 * Class RepositoryTest
 * @package Tests\Feature\WebHooks
 */
class RepositoryTest extends TestCase
{
    use RefreshDatabase;
    /**
     * @var WebHookRepository $webHookRepo
     */
    private $webHookRepo;



    /*
       *
       * public function urlHasVariables(WebHook $hook): bool;
       * public function urlVariables(WebHook $hook): array;
       * public function matchingEvent(String $event): Collection;
       * public function fire(String $event, $data): void;
       * public function replaceVars(WebHook $hook, $data): WebHook;

   */

    /**
     * Setup the test environment.
     *
     * @return void
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->webHookRepo = app()->make('App\Repositories\WebHook\WebHookRepository');
    }


    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testUrlHasVariables()
    {
        $hook = WebHook::make(['url' => 'https://test.de/{test}/{test2}']);
        $hasVars = $this->webHookRepo->urlHasVariables($hook);
        $this->assertTrue($hasVars);
    }
    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function testUrlVariables()
    {
        $hook = WebHook::make(['url' => 'https://www.kuhdo.de/{test}/{test2}']);
        $vars = $this->webHookRepo->urlVariables($hook);
        $this->assertContains('test', $vars);
        $this->assertContains('test2', $vars);

    }

    /**
     *
     *
     */
    public function testReplaceVarsArray()
    {
        $hook = WebHook::make(['url' => 'https://www.kuhdo.de/{test}/{test2}']);
        $hook = $this->webHookRepo->replaceVars($hook, ['test' => 1, 'test2' => 2]);
        $this->assertTrue('https://www.kuhdo.de/1/2'===$hook->url);
    }

    public function testReplaceVarsArrayKeyNotFound()
    {
        $hook = WebHook::make(['url' => 'https://www.kuhdo.de/{test}/{test2}']);
        $this->expectException(\ErrorException::class);
        $hook = $this->webHookRepo->replaceVars($hook, []);
    }
    /**
     *
     *
     */
    public function testReplaceVarsModel()
    {
        $user = factory('App\User')->make();
        $hook = WebHook::make(['url' => 'https://www.kuhdo.de/{email}/{name}']);
        $hook = $this->webHookRepo->replaceVars($hook, $user);
        $this->assertTrue('https://www.kuhdo.de/'. urlencode($user->email). '/'. urlencode($user->name)==$hook->url);
    }

    public function testReplaceVarsModelAttributeNotFound()
    {
        $user = factory('App\User')->make();
        $hook = WebHook::make(['url' => 'https://www.kuhdo.de/{test}/{test2}']);
        $this->expectException(\ErrorException::class);
        $this->webHookRepo->replaceVars($hook, $user);
    }
    /**
     *
     *
     */
    public function testMatchingEvent()
    {
        $webHooks = factory('App\WebHook', 25)->make();
//        $clients = app()->make(ClientRepository::class);
        $user = factory('App\User')->create();
//        $clients->createPersonalAccessClient(
//            $user->id, $user->name, 'https://example.org'
//        );
//        $user->createToken('Token Name')->accessToken;

        $webHooks->transform(function(WebHook $hook) use ($user) {
            $hasAsterisk = rand(0,3) == 0;
            $hook->event = $hasAsterisk ? explode('.', $hook->event)[0]. '.*': $hook->event;
            $user->webHooks()->save($hook);
            return $hook;
        });

        $randomHook = $webHooks->random();
        $matchingHooksRepo = $this->webHookRepo->matchingEvents($randomHook->event);

        if(Str::contains($randomHook->event, '*')) {
            $matchingHooksCol = $webHooks->filter(function(WebHook $hook) use ($randomHook) {
                return Str::startsWith($hook->event, explode('.', $randomHook->event)[0] . '.');
            });
        } else {
            $matchingHooksCol = $webHooks->filter(function(Webhook $hook) use ($randomHook) {
                return $hook->event == $randomHook->event;
            });
        }

        $this->assertTrue($matchingHooksCol->count() == $matchingHooksRepo->count());
        $matchingHooksCol->each(function(Webhook $hook) use($matchingHooksRepo) {
            $this->assertContains($hook->toArray(), $matchingHooksRepo->toArray());
        });
//        $user->webHooks()->saveMany($webHooks);
//        Event::fake();
//        $tradingMonth = factory('App\TradingMonth')->create(["commodity_id" => factory('App\Commodity')->create()->id]);
//        //$this->webHookRepo->fire($randomHook->event, $tradingMonth);
//        Event::assertDispatched($randomHook->event, $matchingHooksRepo->count());
    }
}
